const puppeteer = require("puppeteer");
const fs = require("fs");

async function scanSite(website) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const urlList = new Set();
  const scanList = [website];

  while (scanList.length) {
    const targetPage = scanList.pop();
    if (urlList.has(targetPage)) continue;
    urlList.add(targetPage);

    try {
      await page.goto(targetPage, {
        waitUntil: "domcontentloaded",
        timeout: 30000,
      });
    } catch (error) {
      console.error(`Failed to load ${targetPage}: ${error.message}`);
      continue;
    }

    const links = await page.evaluate(() => {
      return Array.from(document.querySelectorAll("a"))
        .map((anchor) => anchor.href)
        .filter((href) => href.startsWith(window.location.origin));
    });

    links.forEach((link) => {
      if (!urlList.has(link) && !scanList.includes(link)) {
        scanList.push(link);
      }
    });
  }

  await browser.close();
  return [...urlList];
}

async function checkIsVulnerableToXss(url) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let isVulnerable = false;

  try {
    await page.goto(url, { waitUntil: "domcontentloaded", timeout: 30000 });
    const inputs = await page.$$("input");

    for (const input of inputs) {
      await input.type('<script>alert("XSS")</script>');

      const form = await input.evaluateHandle((el) => el.closest("form"));
      if (form) {
        await form.evaluate((form) => form.submit());
        await page.waitForNavigation({
          waitUntil: "domcontentloaded",
          timeout: 30000,
        });
      } else {
        await input.press("Enter");
        await page.waitForNavigation({
          waitUntil: "domcontentloaded",
          timeout: 30000,
        });
      }

      const dialogPromise = new Promise((resolve) =>
        page.once("dialog", resolve)
      );
      const dialog = await Promise.race([
        dialogPromise,
        new Promise((resolve) => setTimeout(resolve, 5000)),
      ]);

      if (dialog) {
        console.log(`XSS found on ${url}`);
        await dialog.dismiss();
        isVulnerable = true;
        break;
      }
    }
  } catch (error) {
    console.error(`Failed to check ${url}: ${error.message}`);
  } finally {
    await browser.close();
  }

  return { url, isVulnerable };
}

function saveResultsToFile(results, filename) {
  const data = results
    .map(
      ({ url, isVulnerable }) =>
        `${url}: ${isVulnerable ? "vulnerable" : "not vulnerable"}`
    )
    .join("\n");

  fs.writeFileSync(filename, data, "utf-8");
  console.log(`Results saved to ${filename}`);
}

(async () => {
  const start = Date.now();
  const website = "https://www.smartwoodflooring-scotland.com/";
  const urlList = await scanSite(website);

  const results = [];
  for (const url of urlList) {
    const result = await checkIsVulnerableToXss(url);
    results.push(result);
  }

  saveResultsToFile(results, "xss_scan_results.txt");
  const end = Date.now();
  console.log(`Total execution time: ${(end - start) / 1000} seconds`);
})();
